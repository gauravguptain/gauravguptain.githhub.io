<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Gaurav Gupta]]></title>
  <link href="http://gauravguptain.bitbucket.org/atom.xml" rel="self"/>
  <link href="http://gauravguptain.bitbucket.org/"/>
  <updated>2014-04-10T23:41:21+05:30</updated>
  <id>http://gauravguptain.bitbucket.org/</id>
  <author>
    <name><![CDATA[Gaurav Gupta]]></name>
    <email><![CDATA[gaurav.gupta.in@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Code Fearlessly]]></title>
    <link href="http://gauravguptain.bitbucket.org/blog/2014/04/10/code-fearlessly/"/>
    <updated>2014-04-10T11:41:26+05:30</updated>
    <id>http://gauravguptain.bitbucket.org/blog/2014/04/10/code-fearlessly</id>
    <content type="html"><![CDATA[<p>Intimidation is a productivity killer. Don’t be afraid to break stuff, try new things, etc. Don’t be a Cowardly Coder — Code Fearlessly. </p>

<p><a href="http://cam.ly/blog/2010/12/code-fearlessly/">Read more at cam.ly</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Passenger Standalone init script]]></title>
    <link href="http://gauravguptain.bitbucket.org/blog/2014/03/05/passenger-standalone-init-script/"/>
    <updated>2014-03-05T12:35:49+05:30</updated>
    <id>http://gauravguptain.bitbucket.org/blog/2014/03/05/passenger-standalone-init-script</id>
    <content type="html"><![CDATA[<p>In our production app servers we installed passenger as <code>passenger-install-nginx-module</code>, which installs passenger as an nginx module. I wanted to separate passenger and nginx as we do proxy_pass requests to other services also. I struggled a lot to install standalone passenger, until recently I found an init script for passenger. </p>

<p><a href="https://github.com/railsware/passenger-initscript">https://github.com/railsware/passenger-initscript</a></p>

<!--more-->
<p>This help me to separate out nginx and passenger. Using this I can easily deploy multiple apps having different gemset.</p>

<h2 id="installation">Installation</h2>

<div><div class="CodeRay">
  <div class="code"><pre>cd /etc/init.d
sudo wget https://github.com/railsware/passenger-initscript/raw/master/passenger
sudo chmod +x passenger

sudo /etc/init.d/passenger setup

sudo cp /etc/passenger.d/example.yml.disabled /etc/passenger.d/app1.yml
sudo cp /etc/passenger.d/example.yml.disabled /etc/passenger.d/app2.yml
...
</pre></div>
</div>
</div>

<h2 id="configuration-file-sample">Configuration file sample</h2>

<p>/etc/passenger/blog.yml</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="key">rvm</span>: <span class="string"><span class="content">ruby-1.9.2@example</span></span>
<span class="key">cwd</span>: <span class="string"><span class="content">/var/apps/blog/current</span></span>
<span class="key">user</span>: <span class="string"><span class="content">deploy</span></span>
<span class="key">port</span>: <span class="string"><span class="content">8080</span></span>
<span class="key">environment</span>: <span class="string"><span class="content">production</span></span>
<span class="key">max-pool-size</span>: <span class="string"><span class="content">4</span></span>
<span class="key">min-instances</span>: <span class="string"><span class="content">1</span></span>
<span class="key">pid-file</span>: <span class="string"><span class="content">/var/apps/blog/current/tmp/pids/passenger.pid</span></span>
<span class="key">log-file</span>: <span class="string"><span class="content">/var/apps/blog/current/log/passenger.log</span></span>
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customise BASH prompt for Virtualenv]]></title>
    <link href="http://gauravguptain.bitbucket.org/blog/2013/09/30/customise-bash-prompt-for-virtualenv/"/>
    <updated>2013-09-30T12:38:47+05:30</updated>
    <id>http://gauravguptain.bitbucket.org/blog/2013/09/30/customise-bash-prompt-for-virtualenv</id>
    <content type="html"><![CDATA[<p>If you are using bash and working on git, rvm and python virtualenv then following code will be very useful. Just append it to you ~/.bashrc </p>

<!--more-->
<div><div class="CodeRay">
  <div class="code"><pre>################################### CUSTOM PROMPT #######################################################
RED=&quot;\[\033[0;31m\]&quot;
YELLOW=&quot;\[\033[0;33m\]&quot;
GREEN=&quot;\[\033[0;32m\]&quot;
BLUE=&quot;\[\033[1;34m\]&quot;
NO_COLOUR=&quot;\[\033[0m\]&quot;
CYAN=&quot;\[\033[0;36m\]&quot;
PURPLE=&quot;\[\033[0;35m\]&quot;
 
# Determine active Python virtualenv details.
function set_virtualenv () {
    if test -z &quot;$VIRTUAL_ENV&quot; ; then
        PYTHON_VIRTUALENV=&quot;&quot;
    else
        PYTHON_VIRTUALENV=&quot;$CYAN(`basename \&quot;$VIRTUAL_ENV\&quot;`)${NO_COLOUR} &quot;
    fi
}
 
function set_rvm_prompt () {
  local gemset=$(echo $GEM_HOME | awk -F'@' '{print $2}')
  [ &quot;$gemset&quot; != &quot;&quot; ] &amp;&amp; echo &quot;(@$gemset) &quot;
}
 
function parse_git_branch () {
        git branch 2&gt; /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}
 
function set_git_branch () {
  # Capture the output of the &quot;git status&quot; command.
 
    git_status=&quot;$(git status 2&gt; /dev/null)&quot;
    # Set color based on clean/staged/dirty.
    if [[ ${git_status} =~ .*&quot;working directory clean&quot;.* ]]; then
        B_STATE=&quot;${GREEN}&quot;
    elif [[ ${git_status} =~ .*&quot;Changes to be committed&quot;.* ]]; then
        B_STATE=&quot;${YELLOW}&quot;
    else
        B_STATE=&quot;${RED}&quot;
    fi
}
 
prompt_cmd () {
    set_virtualenv
    set_git_branch
    PS1=&quot;${PYTHON_VIRTUALENV}$PURPLE\$(set_rvm_prompt)$NO_COLOUR\u@\h:[\W]${B_STATE}\$(parse_git_branch)$NO_COLOUR\$ &quot;
}
 
PROMPT_COMMAND=prompt_cmd
################################### CUSTOM PROMPT #######################################################
</pre></div>
</div>
</div>

<p>Your prompt will now looks something like this </p>

<p>(I need to add an image Here)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Lambdas/Procs in Case Expressions]]></title>
    <link href="http://gauravguptain.bitbucket.org/blog/2013/09/27/ruby-lambdas-slash-procs-in-case-expressions/"/>
    <updated>2013-09-27T12:31:19+05:30</updated>
    <id>http://gauravguptain.bitbucket.org/blog/2013/09/27/ruby-lambdas-slash-procs-in-case-expressions</id>
    <content type="html"><![CDATA[<p>Recently I found interesting way to use lambda/proc in when branches of <code>case</code> expression. I have seen and used used literals, ranges, regex, Arrays etc. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">case</span> something
<span class="keyword">when</span> <span class="constant">Array</span> <span class="keyword">then</span> ...
<span class="keyword">when</span> <span class="integer">1</span>..<span class="integer">100</span> <span class="keyword">then</span> ...
<span class="keyword">when</span> <span class="regexp"><span class="delimiter">/</span><span class="content">some_regexp</span><span class="delimiter">/</span></span> <span class="keyword">then</span> ...
<span class="keyword">end</span>
</pre></div>
</div>
</div>

<!-- more -->

<p>As you probably know <code>case</code> relies on <code>===</code> operator. Ruby will convert the above code to something like:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">case</span> something
<span class="keyword">when</span> <span class="constant">Array</span> === something <span class="keyword">then</span> ...
<span class="keyword">when</span> <span class="integer">1</span>..<span class="integer">100</span> === something <span class="keyword">then</span> ...
<span class="keyword">when</span> <span class="regexp"><span class="delimiter">/</span><span class="content">some_regexp</span><span class="delimiter">/</span></span> === something <span class="keyword">then</span>...
<span class="keyword">end</span>
</pre></div>
</div>
</div>

<p>And <code>===</code> is also defined in <code>Proc</code> class. It just invokes <code>Proc#call</code> with whatever is there in right side as a argument.</p>

<div><div class="CodeRay">
  <div class="code"><pre>is_even = -&gt;(n) { n.even? }

is_even === <span class="integer">5</span> <span class="comment"># =&gt; false</span>

<span class="comment"># same as</span>
is_even.call(<span class="integer">5</span>)
</pre></div>
</div>
</div>

<p>So we can use <code>procs</code> and <code>lambdas</code> as the condition for <code>when</code> branches.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">def</span> <span class="function">even?</span>
  -&gt;(n) { n.even? }
<span class="keyword">end</span>

<span class="keyword">def</span> <span class="function">odd?</span>
  -&gt;(n) { n.odd? }
<span class="keyword">end</span>

<span class="keyword">case</span> x
<span class="keyword">when</span> even? <span class="keyword">then</span> puts <span class="string"><span class="delimiter">'</span><span class="content">even</span><span class="delimiter">'</span></span>
<span class="keyword">when</span> odd? <span class="keyword">then</span> puts <span class="string"><span class="delimiter">'</span><span class="content">odd</span><span class="delimiter">'</span></span>
<span class="keyword">else</span> puts <span class="string"><span class="delimiter">'</span><span class="content">Impossible!</span><span class="delimiter">'</span></span>
<span class="keyword">end</span>
</pre></div>
</div>
</div>

<p>Or you can define lambdas inline</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">case</span> x
<span class="keyword">when</span> -&gt;(n) { n.even? } <span class="keyword">then</span> puts <span class="string"><span class="delimiter">'</span><span class="content">even</span><span class="delimiter">'</span></span>
<span class="keyword">when</span> -&gt;(n) { n.odd? } <span class="keyword">then</span> puts <span class="string"><span class="delimiter">'</span><span class="content">odd</span><span class="delimiter">'</span></span>
<span class="keyword">else</span> puts <span class="string"><span class="delimiter">'</span><span class="content">Impossible!</span><span class="delimiter">'</span></span>
<span class="keyword">end</span>
</pre></div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dos/Don'ts - time zones in Ruby on Rails]]></title>
    <link href="http://gauravguptain.bitbucket.org/blog/2013/08/01/dos-donts-time-zones-in-ruby-on-rails/"/>
    <updated>2013-08-01T12:28:24+05:30</updated>
    <id>http://gauravguptain.bitbucket.org/blog/2013/08/01/dos-donts-time-zones-in-ruby-on-rails</id>
    <content type="html"><![CDATA[<h2 id="dos">DOs</h2>

<div><div class="CodeRay">
  <div class="code"><pre><span class="integer">2</span>.hours.ago <span class="comment"># =&gt; Fri, 02 Mar 2012 20:04:47 JST +09:00</span>
<span class="integer">1</span>.day.from_now <span class="comment"># =&gt; Fri, 03 Mar 2012 22:04:47 JST +09:00</span>
<span class="constant">Date</span>.today.to_time_in_current_zone <span class="comment"># =&gt; Fri, 02 Mar 2012 22:04:47 JST +09:00</span>
<span class="constant">Date</span>.current <span class="comment"># =&gt; Fri, 02 Mar</span>
<span class="constant">Time</span>.zone.parse(<span class="string"><span class="delimiter">&quot;</span><span class="content">2012-03-02 16:05:37</span><span class="delimiter">&quot;</span></span>) <span class="comment"># =&gt; Fri, 02 Mar 2012 16:05:37 JST +09:00</span>
<span class="constant">Time</span>.zone.now <span class="comment"># =&gt; Fri, 02 Mar 2012 22:04:47 JST +09:00</span>
<span class="constant">Time</span>.current <span class="comment"># Same thing but shorter. (Thank you Lukas Sarnacki pointing this out.)</span>
<span class="constant">Time</span>.zone.today <span class="comment"># If you really can't have a Time or DateTime for some reason</span>
<span class="constant">Time</span>.zone.now.utc.iso8601 <span class="comment"># When supliyng an API (you can actually skip .zone here, but I find it better to always use it, than miss it when it's needed)</span>
<span class="constant">Time</span>.strptime(time_string, <span class="string"><span class="delimiter">'</span><span class="content">%Y-%m-%dT%H:%M:%S%z</span><span class="delimiter">'</span></span>).in_time_zone(<span class="constant">Time</span>.zone) <span class="comment"># If you can't use Time#parse</span>
</pre></div>
</div>
</div>

<h2 id="donts">DON’Ts</h2>

<div><div class="CodeRay">
  <div class="code"><pre><span class="constant">Time</span>.now <span class="comment"># =&gt; Returns system time and ignores your configured time zone.</span>
<span class="constant">Time</span>.parse(<span class="string"><span class="delimiter">&quot;</span><span class="content">2012-03-02 16:05:37</span><span class="delimiter">&quot;</span></span>) <span class="comment"># =&gt; Will assume time string given is in the system's time zone.</span>
<span class="constant">Time</span>.strptime(time_string, <span class="string"><span class="delimiter">'</span><span class="content">%Y-%m-%dT%H:%M:%S%z</span><span class="delimiter">'</span></span>) <span class="comment"># Same problem as with Time#parse.</span>
<span class="constant">Date</span>.today <span class="comment"># This could be yesterday or tomorrow depending on the machine's time zone.</span>
<span class="constant">Date</span>.today.to_time <span class="comment"># =&gt; # Still not the configured time zone.</span>
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java reflection performance]]></title>
    <link href="http://gauravguptain.bitbucket.org/blog/2012/11/23/java-reflection-performance/"/>
    <updated>2012-11-23T12:22:07+05:30</updated>
    <id>http://gauravguptain.bitbucket.org/blog/2012/11/23/java-reflection-performance</id>
    <content type="html"><![CDATA[<p>Because reflection involves types that are dynamically resolved, certain Java virtual machine optimizations can not be performed. Consequently, reflective operations have slower performance than their non-reflective counterparts, and should be avoided in sections of code which are called frequently in performance-sensitive applications.</p>

<!--more-->
<p><a href="http://stackoverflow.com/questions/435553/java-reflection-performance">http://stackoverflow.com/questions/435553/java-reflection-performance</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use exceptions only for exceptional conditions]]></title>
    <link href="http://gauravguptain.bitbucket.org/blog/2012/02/22/use-exceptions-only-for-exceptional-conditions/"/>
    <updated>2012-02-22T11:43:12+05:30</updated>
    <id>http://gauravguptain.bitbucket.org/blog/2012/02/22/use-exceptions-only-for-exceptional-conditions</id>
    <content type="html"><![CDATA[<p>When used to best advantage, exceptions can improve a program’s readability, reliability, and maintainability. When used improperly, they can have the opposite effect.</p>

<!--more-->

<h2 id="use-exceptions-only-for-exceptional-conditions">Use exceptions only for exceptional conditions</h2>
<p>Someday, if you are unlucky, you may stumble across a piece of code that looks something like this:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="comment">// Horrible abuse of exceptions. Don't ever do this!</span>
<span class="keyword">try</span> {
   <span class="type">int</span> i = <span class="integer">0</span>;
   <span class="keyword">while</span>(<span class="predefined-constant">true</span>)
        range[i++].climb();
} <span class="keyword">catch</span>(<span class="exception">ArrayIndexOutOfBoundsException</span> e) {
}
</pre></div>
</div>
</div>

<p>What does this code do? It’s not at all obvious from inspection, and that’s reason enough not to use it. It turns out to be a horribly ill-conceived idiom for looping through the elements of an array. The infinite loop terminates by throwing, catching, and ignoring an <code>ArrayIndexOutOfBoundsException</code> when it attempts to access the first array element outside the bounds of the array. It’s supposed to be equivalent to the standard idiom for looping through an array, which is instantly recognizable to any Java programmer:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">for</span> (Mountain m : range)
    m.climb();
</pre></div>
</div>
</div>

<p>So why would anyone use the exception-based loop in preference to the tried and true? It’s a misguided attempt to improve performance based on the faulty reasoning that, since the VM checks the bounds of all array accesses, the normal loop termination test—hidden by the compiler but still present in the for-each loop—is redundant and should be avoided. There are three things wrong with this reasoning:</p>

<ul>
  <li>Because exceptions are designed for exceptional circumstances, there is little incentive for JVM implementors to make them as fast as explicit tests.</li>
  <li>Placing code inside a try-catch block inhibits certain optimizations that modern JVM implementations might otherwise perform.</li>
  <li>The standard idiom for looping through an array doesn’t necessarily result in redundant checks. Modern JVM implementations optimize them away.</li>
</ul>

<p>In fact, the exception-based idiom is far slower than the standard one on modern JVM implementations. On my machine, the exception-based idiom is more than twice as slow as the standard one for arrays of one hundred elements.</p>

<p>Not only does the exception-based loop obfuscate the purpose of the code and reduce its performance, but it’s not guaranteed to work! In the presence of an unrelated bug, the loop can fail silently and mask the bug, greatly complicating the debugging process. Suppose the computation in the body of the loop invokes a method that performs an out-of-bounds access to some unrelated array. If a reasonable loop idiom were used, the bug would generate an uncaught exception, resulting in immediate thread termination with a full stack trace. If the misguided exception-based loop were used, the bug-related exception would be caught and misinterpreted as a normal loop termination.</p>

<p>The moral of this story is simple: <strong>exceptions are, as their name implies, to be used only for exceptional conditions; they should never be used for ordinary control flow</strong>. More generally, you should use standard, easily recognizable idioms in preference to overly clever techniques that purport to offer better performance. Even if the performance advantage is real, it may not remain in the face of steadily improving platform implementations. The subtle bugs and maintenance headaches that come from overly clever techniques, however, are sure to remain.</p>

<p>This principle also has implications for API design. <strong>A well-designed API must not force its clients to use exceptions for ordinary control flow</strong>. A class with a “state-dependent” method that can be invoked only under certain unpredictable conditions should generally have a separate “state-testing” method indicating whether it is appropriate to invoke the state-dependent method. For example, the Iterator interface has the state-dependent method next and the corresponding state-testing method hasNext. This enables the standard idiom for iterating over a collection with a traditional for loop (as well as the for-each loop, where the hasNext method is used internally):</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">for</span> (<span class="predefined-type">Iterator</span> i = collection.iterator(); i.hasNext(); ) {
  Foo foo = i.next();
  ...
}
</pre></div>
</div>
</div>

<p>If Iterator lacked the hasNext method, clients would be forced to do this instead:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="comment">// Do not use this hideous code for iteration over a collection!</span>
<span class="keyword">try</span> {
  <span class="predefined-type">Iterator</span> i = collection.iterator();
  <span class="keyword">while</span>(<span class="predefined-constant">true</span>) {
       Foo foo = i.next();
       ...
  }
} <span class="keyword">catch</span> (<span class="exception">NoSuchElementException</span> e) {
}
</pre></div>
</div>
</div>

<p>This should look very familiar after the array iteration example that began this item. In addition to being wordy and misleading, the exception-based loop is likely to perform poorly and can mask bugs in unrelated parts of the system.</p>

<p>An alternative to providing a separate state-testing method is to have the statedependent method return a distinguished value such as null if it is invoked with the object in an inappropriate state. This technique would not be appropriate for Iterator, as null is a legitimate return value for the next method.</p>

<p>Here are some guidelines to help you choose between a state-testing method and a distinguished return value. If an object is to be accessed concurrently without external synchronization or is subject to externally induced state transitions, you must use a distinguished return value, as the object’s state could change in the interval between the invocation of a state-testing method and its state-dependent method. Performance concerns may dictate that a distinguished return value be used if a separate state-testing method would duplicate the work of the statedependent method. All other things being equal, a state-testing method is mildly preferable to a distinguished return value. It offers slightly better readability, and incorrect use may be easier to detect: if you forget to call a state-testing method, the state dependent method will throw an exception, making the bug obvious; if you forget to check for a distinguished return value, the bug may be subtle.</p>

<p>In summary, exceptions are designed for use in exceptional conditions. Don’t use them for ordinary control flow, and don’t write APIs that force others to do so.</p>

<p>( This is taken from Effective Java - Joshua Bloch. Below is just one item of 78 items in the book. A must read for all Java developers.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Closure in Ruby - blocks, procs and lambda]]></title>
    <link href="http://gauravguptain.bitbucket.org/blog/2011/03/21/closure-in-ruby/"/>
    <updated>2011-03-21T06:07:37+05:30</updated>
    <id>http://gauravguptain.bitbucket.org/blog/2011/03/21/closure-in-ruby</id>
    <content type="html"><![CDATA[<p>Before going into Blocks, Procs and lambdas lets try to understand what is closure. There are many decent developers out there who don’t know what a closure is. Reason for this is most of us learn programming in c, c++ or java, and these languages doesn’t support closure. First time I came across to functional programming(which supports closure) is during AI subject where we have to do some Lisp. And frankly speaking I struggled badly. We certainly had some exposure to closure during that subject but who had time to think about new style of programming and which rarely used in main stream at that time. By the time I heard closure back in industry, all concepts of AI subject was forgotten. Its time to accept the fact that functional style is coming back from vengeance.<!--more--> All scripting language today which is used in agile web development is heavily using these concepts like Ruby, Python, Javascript etc. </p>

<p>I found these definitions of Closure over internet</p>

<blockquote>
  <p>In computer science, a closure is a first-class function with free variables that are bound in the lexical environment.</p>
</blockquote>

<blockquote>
  <p>A closure is a function that is said to be “closed over” it’s free variables.</p>
</blockquote>

<p>What the hell does that even mean! Lets try to explain in simple way. A closure is basically a function/method that has the following two properties:</p>

<ul>
  <li>You can pass it around like an object (to be called later)</li>
  <li>It remembers the values of all the variables that were in scope when the function was created. It is then able to access those variables when it is called even though they may no longer be in scope.</li>
</ul>

<p>Let’s fill in some more details. As you may have guessed, you don’t get closures for free; they must be explicitly supported by the language. In order for the language to be able to support closures, it must support <a href="http://en.wikipedia.org/wiki/First-class_function">first-class functions</a>. A first class function is a function that can be treated like an object in that you can store it in collections and pass it as a parameter to other functions. As I said, the ability to be passed around is the first property of a closure.</p>

<p>For example (javascript) - </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">function</span> <span class="function">print</span>(value, formatFunction) {
    console.log(formatFunction(value));
}

print(<span class="integer">5</span>, <span class="keyword">function</span>(value){
    <span class="keyword">return</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">Value is: </span><span class="delimiter">&quot;</span></span> + value;
});
</pre></div>
</div>
</div>

<p>In the above example we pass a function as a second argument to <code>print()</code>. In this case function which is passed is called as closure function.</p>

<p>A normal function is defined in a particular scope (i.e. in a class) and can only be called within that scope. This function has access to all the variables in the scope that it is defined, like the parameters that are passed into it as well as class variables. A closure on the other hand may be defined in one scope and be called in a completely different scope (since we can pass it around before calling it). Because of this, when a closure is created, it retains the values of all the variables that were in scope when the closure was defined. Even if the variables are generally no longer in scope when the closure is called, within the closure they still are. In other words, the closure retains knowledge of its lexical environment at the time it was defined.</p>

<p>For example (javascript) - </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">function</span> <span class="function">test</span>(){
    <span class="keyword">var</span> i = <span class="integer">0</span>;
    <span class="keyword">return</span> funtion(){
        console.log(i++);
    }
}
<span class="keyword">var</span> inc = test();
inc();
<span class="comment">// prints 0</span>
inc();
<span class="comment">// prints 1</span>
</pre></div>
</div>
</div>

<p>In the above example <code>test()</code> returns a function which increaments <code>i</code> and it is in the test scope. In this case returning function is called as closure function.</p>

<p>Ruby handles closures in unique way and so it is most misunderstood concept. Ruby has four different ways of using closures. There are many sites which provides very good information about how closures work in Ruby. This can be one, its more like a self notes.</p>

<h2 id="blocks">Blocks</h2>
<p>Blocks are the most commonly used form of closures in Ruby. You can find them all over the core Ruby libraries.
Think of blocks as just a chunk of code that will be yielded to or called in the method you supply it to.</p>

<p>Blocks are defined after the last parameter to a method call between {} or do/end. Each call to yield in the method will invoke the block that was passed to that method. You can specify arguments to yield that will be passed to the block. If you do this, you must also specify the same parameters in the block definition. Each method can only receive a single block argument; although, it may yield to this single block multiple times. Calling yield without supplying a block will result in an error.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">def</span> <span class="function">my_print</span> (value) 
    puts <span class="keyword">yield</span>(value) <span class="keyword">if</span> block_given? 
<span class="keyword">end</span>

my_print(<span class="integer">5</span>) {|value| <span class="string"><span class="delimiter">&quot;</span><span class="content">Value is: </span><span class="inline"><span class="inline-delimiter">#{</span>value<span class="inline-delimiter">}</span></span><span class="delimiter">&quot;</span></span>}
<span class="comment"># Value is: 5</span>

<span class="comment"># Same but different syntax</span>
my_print <span class="integer">5</span> <span class="keyword">do</span> |value|
    <span class="string"><span class="delimiter">&quot;</span><span class="content">Value is: </span><span class="inline"><span class="inline-delimiter">#{</span>value<span class="inline-delimiter">}</span></span><span class="delimiter">&quot;</span></span>
<span class="keyword">end</span>
<span class="comment"># Value is: 5</span>
</pre></div>
</div>
</div>

<h2 id="procs">Procs</h2>
<p>Unlike blocks, procs can be assigned to local variables, more than one procs can be passed to a method and Procs are executed using the call keyword.</p>

<div><div class="CodeRay">
  <div class="code"><pre>greeting = <span class="constant">Proc</span>.new { puts <span class="string"><span class="delimiter">&quot;</span><span class="content">Hello World!</span><span class="delimiter">&quot;</span></span> }
greeting.call

<span class="comment"># Hello World!</span>
</pre></div>
</div>
</div>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">def</span> <span class="function">my_print</span> (value, format_proc) 
    puts format_proc.call(value)
<span class="keyword">end</span>

my_print(<span class="integer">5</span>, <span class="constant">Proc</span>.new {|value| <span class="string"><span class="delimiter">&quot;</span><span class="content">Value is: </span><span class="inline"><span class="inline-delimiter">#{</span>value<span class="inline-delimiter">}</span></span><span class="delimiter">&quot;</span></span>})
<span class="comment"># Value is: 5</span>
</pre></div>
</div>
</div>

<p>Leading an explicit block parameter with &amp; (ie &amp;block) will convert the block to a proc.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">def</span> <span class="function">a</span> &amp;block
    block.call <span class="integer">2</span> <span class="comment"># block is now a proc so it has a call method available</span>
<span class="keyword">end</span>

a() {|x| puts x}
<span class="comment"># 2</span>
<span class="comment"># =&gt; nil</span>
</pre></div>
</div>
</div>

<p>Leading a proc argument with &amp; will convert the proc to a block.</p>

<div><div class="CodeRay">
  <div class="code"><pre>say = <span class="constant">Proc</span>.new {puts <span class="string"><span class="delimiter">'</span><span class="content">what?</span><span class="delimiter">'</span></span>}
<span class="integer">2</span>.times &amp;say <span class="comment"># times accepts a block and yields to it</span>
<span class="comment"># what</span>
<span class="comment"># what</span>
<span class="comment"># =&gt; 2</span>
</pre></div>
</div>
</div>

<h2 id="lambdas">Lambdas</h2>
<p>Lambdas are a more strict form of Proc. They are defined with lambda or -&gt;(). The differences between a lambda and a proc are:</p>

<ul>
  <li>Lambdas are more strict with regard to argument checking.</li>
  <li>Lambdas can return a value with the return keyword.</li>
</ul>

<p>Example</p>

<div><div class="CodeRay">
  <div class="code"><pre>a = -&gt;(x,y) {x+y}
a.call <span class="integer">2</span>,<span class="integer">3</span>
<span class="comment"># =&gt; 5</span>
a.class
<span class="comment"># =&gt; Proc</span>
</pre></div>
</div>
</div>

<p>Please leave comments if you have further queries or comments about Closure, Blocks, Procs and Lambdas.</p>

]]></content>
  </entry>
  
</feed>
