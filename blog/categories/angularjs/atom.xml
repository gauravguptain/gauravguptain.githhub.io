<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: angularjs | Gaurav Gupta]]></title>
  <link href="http://gauravguptain.bitbucket.org/blog/categories/angularjs/atom.xml" rel="self"/>
  <link href="http://gauravguptain.bitbucket.org/"/>
  <updated>2014-04-15T11:57:57+05:30</updated>
  <id>http://gauravguptain.bitbucket.org/</id>
  <author>
    <name><![CDATA[Gaurav Gupta]]></name>
    <email><![CDATA[gaurav.gupta.in@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[File organization in Angularjs]]></title>
    <link href="http://gauravguptain.bitbucket.org/blog/2013/12/02/file-organization-in-angularjs/"/>
    <updated>2013-12-02T11:05:57+05:30</updated>
    <id>http://gauravguptain.bitbucket.org/blog/2013/12/02/file-organization-in-angularjs</id>
    <content type="html"><![CDATA[<p>There is lot of argument about file organization and naming in Angularjs. Many framework, like Ruby on Rails, make this decision for you by enforcing a convention. For example, Rails expect your controllers should be in myApp/app/controllers/ and views in myApp/app/views/. AngularJS doesn’t provide any such conventions. It’s all up to you.</p>

<!--more-->
<p>Below are some possible solutions.</p>

<h2 id="monolithic-files">Monolithic files</h2>

<p>The <a href="https://github.com/angular/angular-seed">angular-seed</a> project from angular recommends something like below.</p>

<div><div class="CodeRay">
  <div class="code"><pre>partials/
    home.html
    login.html
    users.html
    orders.html
js/
    controllers.js
    directives.js
    filters.js
    services.js
    app.js
</pre></div>
</div>
</div>

<p>It work great for small applications but quickly become unmaintainable with large applications.</p>

<h2 id="monolithic-folders">Monolithic Folders</h2>

<p>A step in the right direction, but can quickly become ridiculous. Imagine searching through the controllers/ folder when it contains 100+ files, trying to find the code for some obscure piece of functionality that your product manager wants to tweak.</p>

<div><div class="CodeRay">
  <div class="code"><pre>js/
    controllers/
        homeController.js
        loginController.js
    directives/
        usersDirective.js
        ordersDirective.js
    filters/
    services/
        userService.js
        orderService.js
        loginService.js
partials/
    home.html
    login.html
    users.html
    orders.html
app.js
</pre></div>
</div>
</div>

<p>It is better solution as there is different files for each controllers/directives/services. But this can quickly become difficult to use. Think of modifying a particular feature on home page, you have to search through different folders to find its respective code. I would be much easier if all code of one feature lies at one place. </p>

<h2 id="folder-by-feature">Folder by feature</h2>

<div><div class="CodeRay">
  <div class="code"><pre>orders/
    directives/
        orders.html
        ordersDirective.js
    services/
        orderService.js
users/
    directives/
        users.html
        usersDirective.js
    services/
        userService.js
home/
    controllers/
        home.html
        homeController.js
        login.html
        loginController.js
    services/
        loginService.js
shared/
    services/
        i18nService.js
    filters/
        i18nFilter.js
app.js
</pre></div>
</div>
</div>

<p>Looks cool, huh! I personally like this solution because it will help me to visually map what I see on the screen to the source files that makes it happen. If I am looking at the “users” page then I expect to be able to find all of the code for it in the “users” package/folder. Modifying the “users” page now means making changes to files in one package/folder, instead of searching code through out the application.</p>

<p>Please comment below what folder structure you use in your project.</p>
]]></content>
  </entry>
  
</feed>
