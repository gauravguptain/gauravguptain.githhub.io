<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | ]]></title>
  <link href="http://gauravguptain.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://gauravguptain.github.io/"/>
  <updated>2014-04-06T04:11:27+05:30</updated>
  <id>http://gauravguptain.github.io/</id>
  <author>
    <name><![CDATA[Gaurav Gupta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Understanding blocks, procs and lambda in Ruby]]></title>
    <link href="http://gauravguptain.github.io/blog/2014/04/01/closure/"/>
    <updated>2014-04-01T06:07:37+05:30</updated>
    <id>http://gauravguptain.github.io/blog/2014/04/01/closure</id>
    <content type="html"><![CDATA[<p>Blocks, Procs and lambdas (referred to as <a href="http://en.wikipedia.org/wiki/Closure_%28computer_science%29">closures</a> in Computer Science) are one of the most powerful aspects of Ruby, and also one of the most misunderstood. This is probably because Ruby handles closures in a rather unique way. Making things more complicated is that Ruby has four different ways of using closures, each of which is a tad bit different, and sometimes nonsensical. There are quite a few sites with some very good information about how closures work within Ruby. But I have yet to find a good, definitive guide out there. Hopefully, this tutorial becomes just that.</p>

<h2 id="first-up-blocks">First Up, Blocks</h2>
<p>The most common, easiest and arguably most “Ruby like” way to use closures in Ruby is with blocks. They have the following familiar syntax:</p>

<div><div class="CodeRay">
  <div class="code"><pre>array = [<span class="integer">1</span>, <span class="integer">2</span>, <span class="integer">3</span>, <span class="integer">4</span>]

array.collect! <span class="keyword">do</span> |n|
  n ** <span class="integer">2</span>
<span class="keyword">end</span>

puts array.inspect

<span class="comment"># =&gt; [1, 4, 9, 16]</span>
</pre></div>
</div>
</div>
<p>So, what is going on here?</p>

<ol>
  <li>First, we send the <code>collect!</code> method to an Array with a block of code.</li>
  <li>The code block interacts with a variable used within the <code>collect!</code> method (<code>n</code> in this case) and squares it.</li>
  <li>Each element inside the array is now squared.</li>
</ol>

<p>Using a block with the <code>collect!</code> method is pretty easy, we just have to think that <code>collect!</code> will use the code provided within the block on each element in the array. However, what if we want to make our own <code>collect!</code> method? What will it look like? Well, lets build a method called <code>iterate!</code> and see.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">class</span> <span class="class">Array</span>
  <span class="keyword">def</span> <span class="function">iterate!</span>
    <span class="predefined-constant">self</span>.each_with_index <span class="keyword">do</span> |n, i|
      <span class="predefined-constant">self</span>[i] = <span class="keyword">yield</span>(n)
    <span class="keyword">end</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>

array = [<span class="integer">1</span>, <span class="integer">2</span>, <span class="integer">3</span>, <span class="integer">4</span>]

array.iterate! <span class="keyword">do</span> |n|
  n ** <span class="integer">2</span>
<span class="keyword">end</span>

puts array.inspect

<span class="comment"># =&gt; [1, 4, 9, 16]</span>
</pre></div>
</div>
</div>

<p>To start off, we re-opened the Array class and put our <code>iterate!</code> method inside. We will keep with Ruby conventions and put a bang at the end, letting our users know to watch out, as this method might be dangerous! We then use our <code>iterate!</code> method just like Ruby’s built in <code>collect!</code> method. The neat stuff however, is right in the middle of our <code>iterate!</code> method definition.</p>

<p>Unlike attributes, you do not need to specify the name of blocks within your methods. Instead, you can use the yield keyword. Calling this keyword will execute the code within the block provided to the method. Also, notice how we are passing <code>n</code> (the integer that the <code>each_with_index</code> method is currently working with) to yield. The attributes passed to yield corresponds to the variable specified in the piped list of the block. That value is now available to the block and returned by the yield call. So to recap what is happening:</p>

<ol>
  <li>Send <code>iterate!</code> to the Array of numbers.</li>
  <li>hen yield is called with the number <code>n</code> (first time is <code>1</code>, second time is <code>2</code>, etc…), pass the number to the block of code given.</li>
  <li>The block has the number available (also called <code>n</code>) and squares it. As it is the last value handled by the block, it is returned automatically.</li>
  <li>Yield outputs the value returned by the block, and rewrites the value in the array.</li>
  <li>This continues for each element in the array.</li>
</ol>

<p>What we now have is a flexible way to interact with our method. Think of blocks as giving your method an <a href="http://en.wikipedia.org/wiki/API">API</a>, where you can determine to square each value of the array, cube them or convert each number to a string and print them to the screen. The options are infinite, making your method very flexible, and as such, very powerful.</p>

<p>However, that is just the beginning. Using yield is one way to use your block of code, however there is another. By calling it as a Proc. Take a look.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">class</span> <span class="class">Array</span>
  <span class="keyword">def</span> <span class="function">iterate!</span>(&amp;code)
    <span class="predefined-constant">self</span>.each_with_index <span class="keyword">do</span> |n, i|
      <span class="predefined-constant">self</span>[i] = code.call(n)
    <span class="keyword">end</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>

array = [<span class="integer">1</span>, <span class="integer">2</span>, <span class="integer">3</span>, <span class="integer">4</span>]

array.iterate! <span class="keyword">do</span> |n|
  n ** <span class="integer">2</span>
<span class="keyword">end</span>

puts array.inspect

<span class="comment"># =&gt; [1, 4, 9, 16]</span>
</pre></div>
</div>
</div>

<p>Looks very similar to our previous example, however there are two differences. First, we are passing an ampersand argument called <code>&amp;code</code>. This argument is, conveniently enough, our block. The second is in the middle of our <code>iterate!</code>method definition, where instead of using <code>yield</code>, we send <code>call</code> to our block of code. The result is exactly the same. However, if this is so, why even have this difference in syntax? Well, it lets us learn a bit more about what blocks really are. Take a look:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">def</span> <span class="function">what_am_i</span>(&amp;block)
  block.class
<span class="keyword">end</span>

puts what_am_i {}

<span class="comment"># =&gt; Proc</span>
</pre></div>
</div>
</div>

<p>A block is just a Proc! That being said, what is a Proc?</p>
]]></content>
  </entry>
  
</feed>
