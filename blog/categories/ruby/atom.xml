<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Gaurav Gupta]]></title>
  <link href="http://gauravguptain.bitbucket.org/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://gauravguptain.bitbucket.org/"/>
  <updated>2014-04-11T11:35:03+05:30</updated>
  <id>http://gauravguptain.bitbucket.org/</id>
  <author>
    <name><![CDATA[Gaurav Gupta]]></name>
    <email><![CDATA[gaurav.gupta.in@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Passenger Standalone init script]]></title>
    <link href="http://gauravguptain.bitbucket.org/blog/2014/03/05/passenger-standalone-init-script/"/>
    <updated>2014-03-05T12:35:49+05:30</updated>
    <id>http://gauravguptain.bitbucket.org/blog/2014/03/05/passenger-standalone-init-script</id>
    <content type="html"><![CDATA[<p>In our production app servers we installed passenger as <code>passenger-install-nginx-module</code>, which installs passenger as an nginx module. I wanted to separate passenger and nginx as we do proxy_pass requests to other services also. I struggled a lot to install standalone passenger, until recently I found an init script for passenger. </p>

<p><a href="https://github.com/railsware/passenger-initscript">https://github.com/railsware/passenger-initscript</a></p>

<!--more-->
<p>This help me to separate out nginx and passenger. Using this I can easily deploy multiple apps having different gemset.</p>

<h2 id="installation">Installation</h2>

<div><div class="CodeRay">
  <div class="code"><pre>cd /etc/init.d
sudo wget https://github.com/railsware/passenger-initscript/raw/master/passenger
sudo chmod +x passenger

sudo /etc/init.d/passenger setup

sudo cp /etc/passenger.d/example.yml.disabled /etc/passenger.d/app1.yml
sudo cp /etc/passenger.d/example.yml.disabled /etc/passenger.d/app2.yml
...
</pre></div>
</div>
</div>

<h2 id="configuration-file-sample">Configuration file sample</h2>

<p>/etc/passenger/blog.yml</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="key">rvm</span>: <span class="string"><span class="content">ruby-1.9.2@example</span></span>
<span class="key">cwd</span>: <span class="string"><span class="content">/var/apps/blog/current</span></span>
<span class="key">user</span>: <span class="string"><span class="content">deploy</span></span>
<span class="key">port</span>: <span class="string"><span class="content">8080</span></span>
<span class="key">environment</span>: <span class="string"><span class="content">production</span></span>
<span class="key">max-pool-size</span>: <span class="string"><span class="content">4</span></span>
<span class="key">min-instances</span>: <span class="string"><span class="content">1</span></span>
<span class="key">pid-file</span>: <span class="string"><span class="content">/var/apps/blog/current/tmp/pids/passenger.pid</span></span>
<span class="key">log-file</span>: <span class="string"><span class="content">/var/apps/blog/current/log/passenger.log</span></span>
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Lambdas/Procs in Case Expressions]]></title>
    <link href="http://gauravguptain.bitbucket.org/blog/2013/09/27/ruby-lambdas-slash-procs-in-case-expressions/"/>
    <updated>2013-09-27T12:31:19+05:30</updated>
    <id>http://gauravguptain.bitbucket.org/blog/2013/09/27/ruby-lambdas-slash-procs-in-case-expressions</id>
    <content type="html"><![CDATA[<p>Recently I found interesting way to use lambda/proc in when branches of <code>case</code> expression. I have seen and used used literals, ranges, regex, Arrays etc. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">case</span> something
<span class="keyword">when</span> <span class="constant">Array</span> <span class="keyword">then</span> ...
<span class="keyword">when</span> <span class="integer">1</span>..<span class="integer">100</span> <span class="keyword">then</span> ...
<span class="keyword">when</span> <span class="regexp"><span class="delimiter">/</span><span class="content">some_regexp</span><span class="delimiter">/</span></span> <span class="keyword">then</span> ...
<span class="keyword">end</span>
</pre></div>
</div>
</div>

<!-- more -->

<p>As you probably know <code>case</code> relies on <code>===</code> operator. Ruby will convert the above code to something like:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">case</span> something
<span class="keyword">when</span> <span class="constant">Array</span> === something <span class="keyword">then</span> ...
<span class="keyword">when</span> <span class="integer">1</span>..<span class="integer">100</span> === something <span class="keyword">then</span> ...
<span class="keyword">when</span> <span class="regexp"><span class="delimiter">/</span><span class="content">some_regexp</span><span class="delimiter">/</span></span> === something <span class="keyword">then</span>...
<span class="keyword">end</span>
</pre></div>
</div>
</div>

<p>And <code>===</code> is also defined in <code>Proc</code> class. It just invokes <code>Proc#call</code> with whatever is there in right side as a argument.</p>

<div><div class="CodeRay">
  <div class="code"><pre>is_even = -&gt;(n) { n.even? }

is_even === <span class="integer">5</span> <span class="comment"># =&gt; false</span>

<span class="comment"># same as</span>
is_even.call(<span class="integer">5</span>)
</pre></div>
</div>
</div>

<p>So we can use <code>procs</code> and <code>lambdas</code> as the condition for <code>when</code> branches.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">def</span> <span class="function">even?</span>
  -&gt;(n) { n.even? }
<span class="keyword">end</span>

<span class="keyword">def</span> <span class="function">odd?</span>
  -&gt;(n) { n.odd? }
<span class="keyword">end</span>

<span class="keyword">case</span> x
<span class="keyword">when</span> even? <span class="keyword">then</span> puts <span class="string"><span class="delimiter">'</span><span class="content">even</span><span class="delimiter">'</span></span>
<span class="keyword">when</span> odd? <span class="keyword">then</span> puts <span class="string"><span class="delimiter">'</span><span class="content">odd</span><span class="delimiter">'</span></span>
<span class="keyword">else</span> puts <span class="string"><span class="delimiter">'</span><span class="content">Impossible!</span><span class="delimiter">'</span></span>
<span class="keyword">end</span>
</pre></div>
</div>
</div>

<p>Or you can define lambdas inline</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">case</span> x
<span class="keyword">when</span> -&gt;(n) { n.even? } <span class="keyword">then</span> puts <span class="string"><span class="delimiter">'</span><span class="content">even</span><span class="delimiter">'</span></span>
<span class="keyword">when</span> -&gt;(n) { n.odd? } <span class="keyword">then</span> puts <span class="string"><span class="delimiter">'</span><span class="content">odd</span><span class="delimiter">'</span></span>
<span class="keyword">else</span> puts <span class="string"><span class="delimiter">'</span><span class="content">Impossible!</span><span class="delimiter">'</span></span>
<span class="keyword">end</span>
</pre></div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dos/Don'ts - time zones in Ruby on Rails]]></title>
    <link href="http://gauravguptain.bitbucket.org/blog/2013/08/01/dos-donts-time-zones-in-ruby-on-rails/"/>
    <updated>2013-08-01T12:28:24+05:30</updated>
    <id>http://gauravguptain.bitbucket.org/blog/2013/08/01/dos-donts-time-zones-in-ruby-on-rails</id>
    <content type="html"><![CDATA[<h2 id="dos">DOs</h2>

<div><div class="CodeRay">
  <div class="code"><pre><span class="integer">2</span>.hours.ago <span class="comment"># =&gt; Fri, 02 Mar 2012 20:04:47 JST +09:00</span>
<span class="integer">1</span>.day.from_now <span class="comment"># =&gt; Fri, 03 Mar 2012 22:04:47 JST +09:00</span>
<span class="constant">Date</span>.today.to_time_in_current_zone <span class="comment"># =&gt; Fri, 02 Mar 2012 22:04:47 JST +09:00</span>
<span class="constant">Date</span>.current <span class="comment"># =&gt; Fri, 02 Mar</span>
<span class="constant">Time</span>.zone.parse(<span class="string"><span class="delimiter">&quot;</span><span class="content">2012-03-02 16:05:37</span><span class="delimiter">&quot;</span></span>) <span class="comment"># =&gt; Fri, 02 Mar 2012 16:05:37 JST +09:00</span>
<span class="constant">Time</span>.zone.now <span class="comment"># =&gt; Fri, 02 Mar 2012 22:04:47 JST +09:00</span>
<span class="constant">Time</span>.current <span class="comment"># Same thing but shorter. (Thank you Lukas Sarnacki pointing this out.)</span>
<span class="constant">Time</span>.zone.today <span class="comment"># If you really can't have a Time or DateTime for some reason</span>
<span class="constant">Time</span>.zone.now.utc.iso8601 <span class="comment"># When supliyng an API (you can actually skip .zone here, but I find it better to always use it, than miss it when it's needed)</span>
<span class="constant">Time</span>.strptime(time_string, <span class="string"><span class="delimiter">'</span><span class="content">%Y-%m-%dT%H:%M:%S%z</span><span class="delimiter">'</span></span>).in_time_zone(<span class="constant">Time</span>.zone) <span class="comment"># If you can't use Time#parse</span>
</pre></div>
</div>
</div>

<h2 id="donts">DON’Ts</h2>

<div><div class="CodeRay">
  <div class="code"><pre><span class="constant">Time</span>.now <span class="comment"># =&gt; Returns system time and ignores your configured time zone.</span>
<span class="constant">Time</span>.parse(<span class="string"><span class="delimiter">&quot;</span><span class="content">2012-03-02 16:05:37</span><span class="delimiter">&quot;</span></span>) <span class="comment"># =&gt; Will assume time string given is in the system's time zone.</span>
<span class="constant">Time</span>.strptime(time_string, <span class="string"><span class="delimiter">'</span><span class="content">%Y-%m-%dT%H:%M:%S%z</span><span class="delimiter">'</span></span>) <span class="comment"># Same problem as with Time#parse.</span>
<span class="constant">Date</span>.today <span class="comment"># This could be yesterday or tomorrow depending on the machine's time zone.</span>
<span class="constant">Date</span>.today.to_time <span class="comment"># =&gt; # Still not the configured time zone.</span>
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Closure in Ruby - blocks, procs and lambda]]></title>
    <link href="http://gauravguptain.bitbucket.org/blog/2011/03/21/closure-in-ruby/"/>
    <updated>2011-03-21T06:07:37+05:30</updated>
    <id>http://gauravguptain.bitbucket.org/blog/2011/03/21/closure-in-ruby</id>
    <content type="html"><![CDATA[<p>Before going into Blocks, Procs and lambdas lets try to understand what is closure. There are many decent developers out there who don’t know what a closure is. Reason for this is most of us learn programming in c, c++ or java, and these languages doesn’t support closure. First time I came across to functional programming(which supports closure) is during AI subject where we have to do some Lisp. And frankly speaking I struggled badly. We certainly had some exposure to closure during that subject but who had time to think about new style of programming and which rarely used in main stream at that time. By the time I heard closure back in industry, all concepts of AI subject was forgotten. Its time to accept the fact that functional style is coming back from vengeance.<!--more--> All scripting language today which is used in agile web development is heavily using these concepts like Ruby, Python, Javascript etc. </p>

<p>I found these definitions of Closure over internet</p>

<blockquote>
  <p>In computer science, a closure is a first-class function with free variables that are bound in the lexical environment.</p>
</blockquote>

<blockquote>
  <p>A closure is a function that is said to be “closed over” it’s free variables.</p>
</blockquote>

<p>What the hell does that even mean! Lets try to explain in simple way. A closure is basically a function/method that has the following two properties:</p>

<ul>
  <li>You can pass it around like an object (to be called later)</li>
  <li>It remembers the values of all the variables that were in scope when the function was created. It is then able to access those variables when it is called even though they may no longer be in scope.</li>
</ul>

<p>Let’s fill in some more details. As you may have guessed, you don’t get closures for free; they must be explicitly supported by the language. In order for the language to be able to support closures, it must support <a href="http://en.wikipedia.org/wiki/First-class_function">first-class functions</a>. A first class function is a function that can be treated like an object in that you can store it in collections and pass it as a parameter to other functions. As I said, the ability to be passed around is the first property of a closure.</p>

<p>For example (javascript) - </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">function</span> <span class="function">print</span>(value, formatFunction) {
    console.log(formatFunction(value));
}

print(<span class="integer">5</span>, <span class="keyword">function</span>(value){
    <span class="keyword">return</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">Value is: </span><span class="delimiter">&quot;</span></span> + value;
});
</pre></div>
</div>
</div>

<p>In the above example we pass a function as a second argument to <code>print()</code>. In this case function which is passed is called as closure function.</p>

<p>A normal function is defined in a particular scope (i.e. in a class) and can only be called within that scope. This function has access to all the variables in the scope that it is defined, like the parameters that are passed into it as well as class variables. A closure on the other hand may be defined in one scope and be called in a completely different scope (since we can pass it around before calling it). Because of this, when a closure is created, it retains the values of all the variables that were in scope when the closure was defined. Even if the variables are generally no longer in scope when the closure is called, within the closure they still are. In other words, the closure retains knowledge of its lexical environment at the time it was defined.</p>

<p>For example (javascript) - </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">function</span> <span class="function">test</span>(){
    <span class="keyword">var</span> i = <span class="integer">0</span>;
    <span class="keyword">return</span> funtion(){
        console.log(i++);
    }
}
<span class="keyword">var</span> inc = test();
inc();
<span class="comment">// prints 0</span>
inc();
<span class="comment">// prints 1</span>
</pre></div>
</div>
</div>

<p>In the above example <code>test()</code> returns a function which increaments <code>i</code> and it is in the test scope. In this case returning function is called as closure function.</p>

<p>Ruby handles closures in unique way and so it is most misunderstood concept. Ruby has four different ways of using closures. There are many sites which provides very good information about how closures work in Ruby. This can be one, its more like a self notes.</p>

<h2 id="blocks">Blocks</h2>
<p>Blocks are the most commonly used form of closures in Ruby. You can find them all over the core Ruby libraries.
Think of blocks as just a chunk of code that will be yielded to or called in the method you supply it to.</p>

<p>Blocks are defined after the last parameter to a method call between {} or do/end. Each call to yield in the method will invoke the block that was passed to that method. You can specify arguments to yield that will be passed to the block. If you do this, you must also specify the same parameters in the block definition. Each method can only receive a single block argument; although, it may yield to this single block multiple times. Calling yield without supplying a block will result in an error.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">def</span> <span class="function">my_print</span> (value) 
    puts <span class="keyword">yield</span>(value) <span class="keyword">if</span> block_given? 
<span class="keyword">end</span>

my_print(<span class="integer">5</span>) {|value| <span class="string"><span class="delimiter">&quot;</span><span class="content">Value is: </span><span class="inline"><span class="inline-delimiter">#{</span>value<span class="inline-delimiter">}</span></span><span class="delimiter">&quot;</span></span>}
<span class="comment"># Value is: 5</span>

<span class="comment"># Same but different syntax</span>
my_print <span class="integer">5</span> <span class="keyword">do</span> |value|
    <span class="string"><span class="delimiter">&quot;</span><span class="content">Value is: </span><span class="inline"><span class="inline-delimiter">#{</span>value<span class="inline-delimiter">}</span></span><span class="delimiter">&quot;</span></span>
<span class="keyword">end</span>
<span class="comment"># Value is: 5</span>
</pre></div>
</div>
</div>

<h2 id="procs">Procs</h2>
<p>Unlike blocks, procs can be assigned to local variables, more than one procs can be passed to a method and Procs are executed using the call keyword.</p>

<div><div class="CodeRay">
  <div class="code"><pre>greeting = <span class="constant">Proc</span>.new { puts <span class="string"><span class="delimiter">&quot;</span><span class="content">Hello World!</span><span class="delimiter">&quot;</span></span> }
greeting.call

<span class="comment"># Hello World!</span>
</pre></div>
</div>
</div>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">def</span> <span class="function">my_print</span> (value, format_proc) 
    puts format_proc.call(value)
<span class="keyword">end</span>

my_print(<span class="integer">5</span>, <span class="constant">Proc</span>.new {|value| <span class="string"><span class="delimiter">&quot;</span><span class="content">Value is: </span><span class="inline"><span class="inline-delimiter">#{</span>value<span class="inline-delimiter">}</span></span><span class="delimiter">&quot;</span></span>})
<span class="comment"># Value is: 5</span>
</pre></div>
</div>
</div>

<p>Leading an explicit block parameter with &amp; (ie &amp;block) will convert the block to a proc.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">def</span> <span class="function">a</span> &amp;block
    block.call <span class="integer">2</span> <span class="comment"># block is now a proc so it has a call method available</span>
<span class="keyword">end</span>

a() {|x| puts x}
<span class="comment"># 2</span>
<span class="comment"># =&gt; nil</span>
</pre></div>
</div>
</div>

<p>Leading a proc argument with &amp; will convert the proc to a block.</p>

<div><div class="CodeRay">
  <div class="code"><pre>say = <span class="constant">Proc</span>.new {puts <span class="string"><span class="delimiter">'</span><span class="content">what?</span><span class="delimiter">'</span></span>}
<span class="integer">2</span>.times &amp;say <span class="comment"># times accepts a block and yields to it</span>
<span class="comment"># what</span>
<span class="comment"># what</span>
<span class="comment"># =&gt; 2</span>
</pre></div>
</div>
</div>

<h2 id="lambdas">Lambdas</h2>
<p>Lambdas are a more strict form of Proc. They are defined with lambda or -&gt;(). The differences between a lambda and a proc are:</p>

<ul>
  <li>Lambdas are more strict with regard to argument checking.</li>
  <li>Lambdas can return a value with the return keyword.</li>
</ul>

<p>Example</p>

<div><div class="CodeRay">
  <div class="code"><pre>a = -&gt;(x,y) {x+y}
a.call <span class="integer">2</span>,<span class="integer">3</span>
<span class="comment"># =&gt; 5</span>
a.class
<span class="comment"># =&gt; Proc</span>
</pre></div>
</div>
</div>

<p>Please leave comments if you have further queries or comments about Closure, Blocks, Procs and Lambdas.</p>

]]></content>
  </entry>
  
</feed>
